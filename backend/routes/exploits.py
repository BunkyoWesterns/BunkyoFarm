from models.exploit import *
from models.response import *
from models.enums import *
from models.config import *
from db import Exploit, transactional, AttackExecution, Flag
from utils import *
from typing import List
from fastapi import APIRouter, HTTPException
from typing import Dict
import re

router = APIRouter(prefix="/exploits", tags=["Exploits"])

@router.get("/", response_model=List[ExploitDTO])
async def exploits_get():
    return await Exploit.objects.all()

@router.post("/", response_model=MessageResponse[ExploitDTO])
@transactional
async def exploit_new_or_edit(data: ExploitAddForm):
    exploit = await Exploit.objects.get_or_none(id=data.id)
    if exploit:
        exploit = await exploit.update(**json_like(data))
        return { "message": "Exploit updated successfully", "response": exploit }
    exploit = await Exploit(**json_like(data)).save()
    return { "message": "Exploit created successfully", "response": exploit }

@router.delete("/{exploit_id}", response_model=MessageResponse[ExploitDTO])
@transactional
async def exploit_delete_hashed_or_uuid(exploit_id: ExploitID):
    exploit = await Exploit.objects.get_or_none(id=exploit_id)
    if not exploit:
        raise HTTPException(404, "Exploit not found")
    await exploit.delete()
    return { "message": "Exploit deleted successfully", "response": exploit }


@router.put("/{exploit_id}", response_model=MessageResponse[ExploitDTO])
@transactional
async def exploit_edit(exploit_id: ExploitID, data: ExploitEditForm):
    exploit = await Exploit.objects.get_or_none(id=exploit_id)
    if not exploit:
        raise HTTPException(404, "Exploit not found")
    exploit = await exploit.update(**json_like(data))
    return { "message": "Exploit updated successfully", "response": exploit }

@router.post("/{exploit_id}/submit", response_model=MessageResponse[Dict[str, int]])
@transactional
async def exploit_submit(exploit_id: ExploitID, data: ExploitSubmitForm):
    config = await Configuration.get_from_db()
    exploit = await Exploit.objects.get_or_none(id=exploit_id)
    if not exploit:
        raise HTTPException(404, "Exploit not found")
    parsed_data = json_like(data)
    flags = extract_values_by_regex(config.FLAG_REGEX, parsed_data["flags"])
    parsed_data["flags"] = json_like([Flag(flag=flag) for flag in flags])
    await AttackExecution(exploit=exploit, **parsed_data).save_related(follow=True, save_all=True)
    return { "message": "Attack results submitted successfully", "response": { "flags": len(flags) } }

@router.post("/submit", response_model=MessageResponse[Dict[str, int]])
@transactional
async def exploit_submit(data: ManualSubmitForm):
    config = await Configuration.get_from_db()
    
    flags = (data.flags if data.flags else [])
    flags.append(data.output if data.output else "")
    flags = extract_values_by_regex(config.FLAG_REGEX, flags)
    flags = [Flag(flag=flag) for flag in flags]
    await AttackExecution(flags=flags).save_related(follow=True, save_all=True)
    return { "message": "Attack results submitted successfully", "response": { "flags": len(flags) } }