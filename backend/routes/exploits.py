from models.exploit import *
from models.response import *
from db import Exploit, transactional
from utils import *
from typing import List
from fastapi import APIRouter, HTTPException

router = APIRouter(prefix="/exploits", tags=["Exploits"])

@router.get("/", response_model=List[ExploitDTO])
async def exploits_get():
    return await Exploit.objects.all()

@router.post("/", response_model=MessageResponse[ExploitDTO])
@transactional
async def exploit_new_or_edit(data: ExploitAddForm):
    exploit = await Exploit.objects.get_or_none(id=data.id)
    if exploit:
        exploit = await exploit.update(**json_like(data))
        return { "message": "Exploit updated successfully", "response": exploit }
    exploit = await Exploit(**json_like(data)).save()
    return { "message": "Exploit created successfully", "response": exploit }

@router.delete("/{exploit_id}", response_model=MessageResponse[ExploitDTO])
@transactional
async def exploit_delete_hashed_or_uuid(exploit_id: ExploitID):
    exploit = await Exploit.objects.get_or_none(id=exploit_id)
    if not exploit:
        raise HTTPException(404, "Exploit not found")
    await exploit.delete()
    return { "message": "Exploit deleted successfully", "response": exploit }


@router.put("/{exploit_id}", response_model=MessageResponse[ExploitDTO])
@transactional
async def exploit_edit(exploit_id: ExploitID, data: ExploitEditForm):
    exploit = await Exploit.objects.get_or_none(id=exploit_id)
    if not exploit:
        raise HTTPException(404, "Exploit not found")
    exploit = await exploit.update(**json_like(data))
    return { "message": "Exploit updated successfully", "response": exploit }