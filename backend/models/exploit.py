from db import ExploitID, Language, ExploitStatus
from db import ServiceID, ClientID, UnHashedClientID, TeamID, ExploitSourceID
from pydantic import BaseModel, AwareDatetime
from models.enums import AttackExecutionStatus
from utils import json_like

###-- Exploit Models --###

class ExploitDTO(BaseModel):
    id: ExploitID
    name: str
    language: Language
    status: ExploitStatus|None = None
    last_update: AwareDatetime|None = None
    created_at: AwareDatetime
    service: ServiceID
    created_by: ClientID
    last_execution_by: ClientID|None = None
    
    @staticmethod
    def from_db_data(data):
        return json_like(data, convert_keys={
            "created_by_id": "created_by",
            "service_id": "service",
            "last_execution_by_id": "last_execution_by"
        }, unset=True)

class ExploitSourceDTO(BaseModel):
    id:         ExploitSourceID
    hash:       str
    message:    str|None
    pushed_at:  AwareDatetime
    pushed_by:  ClientID
    os_type:    str|None
    distro:     str|None
    arch:       str|None
    exploit:    ExploitID
    
    def db_data(self):
        return json_like(self, convert_keys={
            "pushed_by": "pushed_by_id",
            "exploit": "exploit_id"
        })
    
    @staticmethod
    def from_db_data(data):
        return json_like(data, convert_keys={
            "pushed_by_id": "pushed_by",
            "exploit_id": "exploit"
        }, unset=True)

class ExploitAddForm(BaseModel):
    id: ExploitID
    name: str
    language: Language = Language.other
    service: ServiceID
    created_by: UnHashedClientID #Only the real client can associate an exploit to it
    
    def db_data(self):
        return json_like(self, convert_keys={
            "created_by": "created_by_id",
            "service": "service_id"
        })

class ExploitNewForm(BaseModel):
    name: str|None = None
    language: Language|None = None
    service: ServiceID|None = None
    created_by: UnHashedClientID|None = None #Only the real client can associate an exploit to it

class ExploitEditForm(BaseModel):
    name: str|None = None
    language: Language|None = None
    service: ServiceID|None = None
    
class ExploitSubmitForm(BaseModel):
    start_time: AwareDatetime|None = None
    end_time: AwareDatetime|None = None
    status: AttackExecutionStatus
    output: bytes|None = None
    executed_by: UnHashedClientID|None = None
    target: TeamID|None = None
    flags: list[str]
    
    def db_data(self):
        return json_like(self, convert_keys={
            "executed_by": "executed_by_id",
            "target": "target_id"
        }, mode="python")

class ExploitSourcePushForm(BaseModel):
    message: str|None

class ManualSubmitForm(BaseModel):
    flags: list[str]|None = None
    output: bytes|None = None