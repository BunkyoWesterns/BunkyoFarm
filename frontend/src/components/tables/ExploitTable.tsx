import { deleteExploit, editExploit, exploitsQuery, statusQuery, useClientSolver, useServiceSolver } from "@/utils/queries";
import { getDateSmallFormatted } from "@/utils/time";
import { Box, Button, Group, Modal, Select, Space, Table, TextInput, Title } from "@mantine/core";
import { DeleteButton, EditButton } from "@/components/inputs/Buttons";
import { Exploit, LanguageList } from "@/utils/types";
import { useEffect, useState } from "react";
import { YesOrNoModal } from "@/components/modals/YesOrNoModal";
import { notifications } from "@mantine/notifications";
import { useQueryClient } from "@tanstack/react-query";
import { StatusPoint } from "../elements/ExploitsBar";
import { useForm } from "@mantine/form";


export const ExploitTable = () => {

    const exploits = exploitsQuery()
    const getServiceName = useServiceSolver()
    const getClientName = useClientSolver()

    const [deleteExploit, setDeleteExploit] = useState<Exploit|undefined>()
    const [editExploit, setEditExploit] = useState<Exploit|undefined>()

    const rows = exploits.data?.map((expl) => {
        return <Table.Tr key={expl.id}>
            <Table.Td><StatusPoint status={expl.status} /></Table.Td>
            <Table.Td style={{width:"100%"}}><Box>{expl.name}</Box></Table.Td>
            <Table.Td><Box>{getServiceName(expl.service)}</Box></Table.Td>
            <Table.Td><Box>{expl.language}</Box></Table.Td>
            <Table.Td><Box>{getClientName(expl.last_execution_by)}</Box></Table.Td>
            <Table.Td><Box>{getDateSmallFormatted(expl.last_update)}</Box></Table.Td>
            <Table.Td><EditButton onClick={()=>setEditExploit(expl)} /></Table.Td>
            <Table.Td><DeleteButton onClick={()=>setDeleteExploit(expl)} /></Table.Td>
        </Table.Tr>
    });

    return <>
        <Table>
            <Table.Thead>
                <Table.Tr style={{fontSize: "120%"}}>
                    <Table.Th style={{whiteSpace:"nowrap"}}><StatusPoint /></Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Name</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Service</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Language</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Executed by</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Last Execution</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Edit</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Delete</Table.Th>
                </Table.Tr>
            </Table.Thead>
            <Table.Tbody>{rows}</Table.Tbody>
        </Table>
        <DeleteExploitModal exploit={deleteExploit} onClose={()=>setDeleteExploit(undefined)} />
        <EditExploitModal exploit={editExploit} onClose={()=>setEditExploit(undefined)} />
    </>
}

export const DeleteExploitModal = ({ onClose, exploit }:{ onClose: () => void, exploit?: Exploit }) => {
    const queryClient = useQueryClient()

    return <YesOrNoModal
        open={ exploit != null }
        onClose={onClose}
        title={<Title order={3}>Deleting an exploit</Title>}
        onConfirm={()=>{
            if (exploit == null){
                onClose?.()
                return
            }
            deleteExploit(exploit?.id).then(()=>{
                notifications.show({ title: "Exploit deleted", message: `The exploit ${exploit?.name} has been deleted successfully`, color: "green" })
                queryClient.invalidateQueries({ queryKey: ["clients"] })
            }).catch((err)=>{
                notifications.show({ title: "Error deleting the exploit", message: `An error occurred while deleting the exploit ${exploit?.name}: ${err.message}`, color: "red" })
            }).finally(()=>{ onClose() })
        }}
        size="xl"
        message={
        <>
            <span>Are you sure you want to delete the exploit <b>{exploit?.name}</b>?</span><br />
            <span style={{ color: "yellow" }}>This action could fail if the exploit has performed important actions on the platform!</span>
        </>
    }/>
}

export const EditExploitModal = ({ onClose, exploit }:{ onClose: ()=>void, exploit?:Exploit }) => {
    const form = useForm({
        initialValues: {
            name: exploit?.name??"",
            language: exploit?.language??"",
            service: exploit?.service??"",
        },
        validate: {
            name: (value) => value == ""?"Name is required":undefined,
            language: (value) => LanguageList.includes(value)?undefined:"Language is not valid",
            service: (value) => value == ""?"Service is required":undefined,
        }
    })
    const queryClient = useQueryClient()
    const status = statusQuery()
    const services = status.data?.services??[]

    useEffect(() => {
        form.setInitialValues({
            name: exploit?.name??"",
            language: exploit?.language??"",
            service: exploit?.service??"",
        })
        form.reset()
    }, [exploit])

    return <Modal
        opened={ exploit != null }
        onClose={onClose}
        title="Edit exploit"
        size="xl"
        centered
    >
        <form onSubmit={form.onSubmit((data) => {
            if (exploit == null){
                onClose()
                return
            }
            editExploit(exploit.id, data)
            .then(()=>{
                notifications.show({
                    title: `${exploit.name} Exploit edited!`,
                    message: "Exploit has been edited successfully!",
                    color: "green",
                })
                queryClient.invalidateQueries({ queryKey: ["exploits"] })
            }).catch((err) => {
                notifications.show({
                    title: "Error during editing!",
                    message: err.message??err??"Unknown error",
                    color: "red",
                })
            }).finally(()=>{ onClose() })
        })}>
            <TextInput
                label="Name"
                placeholder="Service name"
                withAsterisk
                {...form.getInputProps("name")}
            />
            <Space h="md" />
            <Select
                label="Exploit language"
                placeholder="python"
                data={LanguageList}
                withAsterisk
                {...form.getInputProps("language")}
            />
            <Space h="md" />
            <Select
                label="Exploit related Service"
                placeholder="CTF Service 1"
                data={services.map((srv) => ({ value: srv.id, label: srv.name }))}
                withAsterisk
                {...form.getInputProps("service")}
            />
            <Group mt="xl" justify="flex-end">
                <Button onClick={form.reset} color="gray" disabled={!form.isDirty()}>Reset</Button>
                <Button type="submit" color="blue" disabled={!form.isValid() || !form.isDirty()}>{"Edit"}</Button>
            </Group>
        </form>
    </Modal>
}