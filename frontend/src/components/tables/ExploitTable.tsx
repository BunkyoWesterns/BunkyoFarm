import { deleteExploit, deleteExploitSource, editExploit, editExploitSource, exploitsQuery, exploitsSourcesQuery, statusQuery, triggerDownloadExploitSource, useClientSolver, useServiceSolver } from "@/utils/queries";
import { getDateFormatted, getDateSmallFormatted } from "@/utils/time";
import { Box, Button, Group, Modal, Select, Space, Table, TextInput, Title } from "@mantine/core";
import { DeleteButton, DownloadButton, EditButton } from "@/components/inputs/Buttons";
import { Exploit, LanguageList } from "@/utils/types";
import { useEffect, useState } from "react";
import { YesOrNoModal } from "@/components/modals/YesOrNoModal";
import { notifications } from "@mantine/notifications";
import { useQueryClient } from "@tanstack/react-query";
import { StatusPoint } from "../elements/ExploitsBar";
import { useForm } from "@mantine/form";


export const ExploitTable = () => {

    const exploits = exploitsQuery()
    const getServiceName = useServiceSolver()
    const getClientName = useClientSolver()

    const [deleteExploit, setDeleteExploit] = useState<Exploit|undefined>()
    const [editExploit, setEditExploit] = useState<Exploit|undefined>()

    const rows = exploits.data?.map((expl) => {
        return <Table.Tr key={expl.id}>
            <Table.Td><StatusPoint status={expl.status} /></Table.Td>
            <Table.Td style={{width:"100%"}}><Box>{expl.name}</Box></Table.Td>
            <Table.Td><Box>{getServiceName(expl.service)}</Box></Table.Td>
            <Table.Td><Box>{expl.language}</Box></Table.Td>
            <Table.Td><Box>{getClientName(expl.last_execution_by)}</Box></Table.Td>
            <Table.Td><Box>{expl.last_update?getDateSmallFormatted(expl.last_update):"Not started"}</Box></Table.Td>
            <Table.Td><EditButton onClick={()=>setEditExploit(expl)} /></Table.Td>
            <Table.Td><DeleteButton onClick={()=>setDeleteExploit(expl)} /></Table.Td>
        </Table.Tr>
    })??[];

    return <>
        <Table>
            <Table.Thead>
                <Table.Tr style={{fontSize: "120%"}}>
                    <Table.Th style={{whiteSpace:"nowrap"}}><StatusPoint /></Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Name</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Service</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Language</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Executed by</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Last Execution</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Edit</Table.Th>
                    <Table.Th style={{whiteSpace:"nowrap"}}>Delete</Table.Th>
                </Table.Tr>
            </Table.Thead>
            <Table.Tbody>{rows}</Table.Tbody>
        </Table>
        <Box className="center-flex" mt={10}>{rows.length == 0 && <Title order={4}>No exploit found</Title>}</Box>
        <DeleteExploitModal exploit={deleteExploit} onClose={()=>setDeleteExploit(undefined)} />
        <EditExploitModal exploit={editExploit} onClose={()=>setEditExploit(undefined)} />
    </>
}

export const DeleteExploitModal = ({ onClose, exploit }:{ onClose: () => void, exploit?: Exploit }) => {
    const queryClient = useQueryClient()

    return <YesOrNoModal
        open={ exploit != null }
        onClose={onClose}
        title={<Title order={3}>Deleting an exploit</Title>}
        onConfirm={()=>{
            if (exploit == null){
                onClose?.()
                return
            }
            deleteExploit(exploit?.id).then(()=>{
                notifications.show({ title: "Exploit deleted", message: `The exploit ${exploit?.name} has been deleted successfully`, color: "green" })
                queryClient.resetQueries({ queryKey: ["exploits"] })

            }).catch((err)=>{
                notifications.show({ title: "Error deleting the exploit", message: `An error occurred while deleting the exploit ${exploit?.name}: ${err.message}`, color: "red" })
            }).finally(()=>{ onClose() })
        }}
        size="xl"
        message={
        <>
            <span>Are you sure you want to delete the exploit <b>{exploit?.name}</b>?</span><br />
            <span style={{ color: "yellow" }}>This action could fail if the exploit has performed important actions on the platform!</span>
        </>
    }/>
}

export const EditExploitModal = ({ onClose, exploit }:{ onClose: ()=>void, exploit?:Exploit }) => {
    const form = useForm({
        initialValues: {
            name: exploit?.name??"",
            language: exploit?.language??"",
            service: exploit?.service??"",
        },
        validate: {
            name: (value) => value == ""?"Name is required":undefined,
            language: (value) => LanguageList.includes(value)?undefined:"Language is not valid",
            service: (value) => value == ""?"Service is required":undefined,
        }
    })

    const sources = exploitsSourcesQuery(exploit?.id)
    const queryClient = useQueryClient()
    const status = statusQuery()
    const services = status.data?.services??[]
    const clientSolver = useClientSolver()
    const [deleteSourceId, setDeleteSourceId] = useState<string|undefined>()
    const [editSourceId, setEditSourceId] = useState<string|undefined>()

    useEffect(() => {
        form.setInitialValues({
            name: exploit?.name??"",
            language: exploit?.language??"",
            service: exploit?.service??"",
        })
        form.reset()
    }, [exploit])

    return <Modal
        opened={ exploit != null }
        onClose={onClose}
        title="Edit exploit"
        size="xl"
        centered
    >
        <form onSubmit={form.onSubmit((data) => {
            if (exploit == null){
                onClose()
                return
            }
            editExploit(exploit.id, data)
            .then(()=>{
                notifications.show({
                    title: `${exploit.name} Exploit edited!`,
                    message: "Exploit has been edited successfully!",
                    color: "green",
                })
                queryClient.resetQueries({ queryKey: ["exploits"] })
            }).catch((err) => {
                notifications.show({
                    title: "Error during editing!",
                    message: err.message??err??"Unknown error",
                    color: "red",
                })
            }).finally(()=>{ onClose() })
        })}>
            <TextInput
                label="Name"
                placeholder="Service name"
                withAsterisk
                {...form.getInputProps("name")}
            />
            <Space h="md" />
            <Box display="flex" style={{ width: "100%" }}>
                <Select
                    label="Exploit language"
                    placeholder="python"
                    data={LanguageList}
                    style={{ width: "100%" }}
                    withAsterisk
                    {...form.getInputProps("language")}
                />
                <Space w="md" />
                <Select
                    label="Exploit related Service"
                    placeholder="CTF Service 1"
                    style={{ width: "100%" }}
                    data={services.map((srv) => ({ value: srv.id, label: srv.name }))}
                    withAsterisk
                    {...form.getInputProps("service")}
                />
            </Box>
            <Title order={3} mt="lg">Sources</Title>
            <Box className="center-flex-col">
                {sources.isLoading && <Title order={4}>Loading sources...</Title>}
                {sources.data?.length == 0 && <Title order={4}>No sources found</Title>}

                {sources.data?.sort((a,b)=>new Date(b.pushed_at).getTime() - new Date(a.pushed_at).getTime()).map((src, i) => {
                    return <Box key={src.id} style={{width:"100%"}}>
                        <Box display="flex" style={{ justifyContent: "space-between", alignItems:"center"}} my="md">
                            <Title order={3}>üì¶ {src.id} {i==0?"(LATEST)":""}</Title>
                            <Box display="flex" style={{gap:10}}>
                                <EditButton onClick={()=>{
                                    setEditSourceId(src.id)
                                }} />
                                <DownloadButton onClick={()=>{
                                    triggerDownloadExploitSource(src.hash)
                                }} />
                                <DeleteButton onClick={()=>{
                                    setDeleteSourceId(src.id)
                                }} />
                            </Box>
                        </Box>
                        
                        <Title order={4}>üí¨ Message: {src.message == ""?"No commit message":src.message}</Title>
                        <Box>#Ô∏è‚É£ hash: {src.hash}</Box>
                        <Box>‚è±Ô∏è Pushed at: {getDateFormatted(src.pushed_at)}</Box>
                        <Box>üë§ By: {clientSolver(src.pushed_by)} ({src.arch} {src.distro} {src.os_type})</Box>
                        
                    </Box>
                })}
            </Box>
            <Group mt="xl" justify="flex-end">
                <Button onClick={form.reset} color="gray" disabled={!form.isDirty()}>Reset</Button>
                <Button type="submit" color="blue" disabled={!form.isValid() || !form.isDirty()}>{"Edit"}</Button>
            </Group>
        </form>

    <YesOrNoModal
        message="Are you sure you want to delete the exploit commit? This could trigger the stop of synced exploit executions!"
        open={deleteSourceId != null}
        onClose={()=>setDeleteSourceId(undefined)}
        onConfirm={()=>{
            deleteExploitSource(deleteSourceId??"").then(()=>{
                notifications.show({ title: "Exploit commit deleted", message: "The exploit commit has been deleted successfully", color: "green" })
                queryClient.refetchQueries({ queryKey: ["exploits", "sources", exploit?.id], })
            }).catch((err)=>{
                notifications.show({ title: "Error deleting the exploit commit", message: `An error occurred while deleting the exploit commit: ${err.message}`, color: "red" })
            }).finally(()=>{ setDeleteSourceId(undefined) })
        }}
        title={"Deleting exploit commit"}
    />
    <EditExploitSource source_id={editSourceId} onClose={() => setEditSourceId(undefined)} exploit_id={exploit?.id} />

    </Modal>
}

export const EditExploitSource = ({ exploit_id, source_id, onClose }: { exploit_id?:string, source_id?: string, onClose:()=>void }) => {

    const sources = exploitsSourcesQuery(exploit_id)
    const src = sources.data?.find((src) => src.id == source_id)
    const clientSolver = useClientSolver()
    const queryClient = useQueryClient()

    const form = useForm({
        initialValues: {
            message: src?.message??"",
        }
    })

    useEffect(() => {
        form.setInitialValues({
            message: src?.message??"",
        })
    , [src]})

    useEffect(() => {
        form.reset()
    }, [exploit_id, source_id])

    return  <Modal opened={source_id != null} size="xl" onClose={onClose} title={<>Edit exploit commit (üì¶ {src?.id??"..."})</>}>
        {src == null?null:<Box>
            <form onSubmit={form.onSubmit((data) => {
                editExploitSource(source_id??"", data).then(()=>{
                    notifications.show({ title: "Exploit commit edited", message: "The exploit commit has been edited successfully", color: "green" })
                    queryClient.refetchQueries({ queryKey: ["exploits", "sources", exploit_id], })
                }).catch((err)=>{
                    notifications.show({ title: "Error editing the exploit commit", message: `An error occurred while editing the exploit commit: ${err.message}`, color: "red" })
                }).finally(()=>{ onClose() })
            })}>
                <Box mb="lg">
                    <TextInput
                        label="üí¨ Message"
                        placeholder="Commit message"
                        {...form.getInputProps("message")}
                        mb="md"
                    />
                    <Box>#Ô∏è‚É£ hash: {src?.hash}</Box>
                    <Box>‚è±Ô∏è Pushed at: {getDateFormatted(src.pushed_at)}</Box>
                    <Box>üë§ By: {clientSolver(src.pushed_by)} ({src.arch} {src.distro} {src.os_type})</Box>
                </Box>

                <Group mt="xl" justify="flex-end">
                    <Button onClick={form.reset} color="gray" disabled={!form.isDirty()}>Reset</Button>
                    <Button type="submit" color="blue" disabled={!form.isValid() || !form.isDirty()}>{"Edit"}</Button>
                </Group>
            </form>
        </Box>}
    </Modal>
}