import { editExploitSource, exploitsSourcesQuery, useClientSolver } from "@/utils/queries"
import { getDateFormatted } from "@/utils/time"
import { Box, Button, Group, Modal, TextInput } from "@mantine/core"
import { useForm } from "@mantine/form"
import { notifications } from "@mantine/notifications"
import { useQueryClient } from "@tanstack/react-query"
import { useEffect } from "react"


export const EditExploitSource = ({ exploit_id, source_id, onClose }: { exploit_id?:string, source_id?: string, onClose:()=>void }) => {

    const sources = exploitsSourcesQuery(exploit_id)
    const src = sources.data?.find((src) => src.id == source_id)
    const clientSolver = useClientSolver()
    const queryClient = useQueryClient()

    const form = useForm({
        initialValues: {
            message: src?.message??"",
        }
    })

    useEffect(() => {
        form.setInitialValues({
            message: src?.message??"",
        })
    , [src]})

    useEffect(() => {
        form.reset()
    }, [exploit_id, source_id])

    return  <Modal opened={source_id != null} size="xl" onClose={onClose} title={<>Edit exploit commit (📦 {src?.id??"..."})</>}>
        {src == null?null:<Box>
            <form onSubmit={form.onSubmit((data) => {
                editExploitSource(source_id??"", data).then(()=>{
                    notifications.show({ title: "Exploit commit edited", message: "The exploit commit has been edited successfully", color: "green" })
                    queryClient.refetchQueries({ queryKey: ["exploits", "sources", exploit_id], })
                }).catch((err)=>{
                    notifications.show({ title: "Error editing the exploit commit", message: `An error occurred while editing the exploit commit: ${err.message}`, color: "red" })
                }).finally(()=>{ onClose() })
            })}>
                <Box mb="lg">
                    <TextInput
                        label="💬 Message"
                        placeholder="Commit message"
                        {...form.getInputProps("message")}
                        mb="md"
                    />
                    <Box>#️⃣ hash: {src?.hash}</Box>
                    <Box>⏱️ Pushed at: {getDateFormatted(src.pushed_at)}</Box>
                    <Box>👤 By: {clientSolver(src.pushed_by)} ({src.arch} {src.distro} {src.os_type})</Box>
                </Box>

                <Group mt="xl" justify="flex-end">
                    <Button onClick={form.reset} color="gray" disabled={!form.isDirty()}>Reset</Button>
                    <Button type="submit" color="blue" disabled={!form.isValid() || !form.isDirty()}>{"Edit"}</Button>
                </Group>
            </form>
        </Box>}
    </Modal>
}