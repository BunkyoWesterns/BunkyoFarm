import { editExploit, exploitsSourcesQuery, statusQuery } from "@/utils/queries"
import { Exploit, LanguageList } from "@/utils/types"
import { Box, Button, Group, Modal, Select, Space, TextInput, Title } from "@mantine/core"
import { useForm } from "@mantine/form"
import { notifications } from "@mantine/notifications"
import { useQueryClient } from "@tanstack/react-query"
import { useEffect } from "react"
import { ExploitSourceCard } from "../elements/ExploitSourceCard"


export const EditExploitModal = ({ onClose, exploit }:{ onClose: ()=>void, exploit?:Exploit }) => {
    const form = useForm({
        initialValues: {
            name: exploit?.name??"",
            language: exploit?.language??"",
            service: exploit?.service??"",
        },
        validate: {
            name: (value) => value == ""?"Name is required":undefined,
            language: (value) => LanguageList.includes(value)?undefined:"Language is not valid",
            service: (value) => value == ""?"Service is required":undefined,
        }
    })

    const sources = exploitsSourcesQuery(exploit?.id)
    const queryClient = useQueryClient()
    const status = statusQuery()
    const services = status.data?.services??[]

    useEffect(() => {
        form.setInitialValues({
            name: exploit?.name??"",
            language: exploit?.language??"",
            service: exploit?.service??"",
        })
        form.reset()
    }, [exploit])

    return <Modal
        opened={ exploit != null }
        onClose={onClose}
        title="Edit exploit"
        size="xl"
        centered
    >
        <form onSubmit={form.onSubmit((data) => {
            if (exploit == null){
                onClose()
                return
            }
            editExploit(exploit.id, data)
            .then(()=>{
                notifications.show({
                    title: `${exploit.name} Exploit edited!`,
                    message: "Exploit has been edited successfully!",
                    color: "green",
                })
                queryClient.invalidateQueries({ queryKey: ["exploits"] })
            }).catch((err) => {
                notifications.show({
                    title: "Error during editing!",
                    message: err.message??err??"Unknown error",
                    color: "red",
                })
            }).finally(()=>{ onClose() })
        })}>
            <TextInput
                label="Name"
                placeholder="Exploit name"
                withAsterisk
                {...form.getInputProps("name")}
            />
            <Space h="md" />
            <Box display="flex" style={{ width: "100%" }}>
                <Select
                    label="Exploit language"
                    placeholder="python"
                    data={LanguageList}
                    allowDeselect={false}
                    style={{ width: "100%" }}
                    withAsterisk
                    {...form.getInputProps("language")}
                />
                <Space w="md" />
                <Select
                    label="Exploit related Service"
                    placeholder="CTF Service 1"
                    style={{ width: "100%" }}
                    allowDeselect={false}
                    data={services.map((srv) => ({ value: srv.id, label: srv.name }))}
                    withAsterisk
                    {...form.getInputProps("service")}
                />
            </Box>
            <Title order={3} mt="lg">Sources</Title>
            <Box className="center-flex-col">
                {sources.isLoading && <Title order={4}>Loading sources...</Title>}
                {sources.data?.length == 0 && <Title order={4}>No sources found</Title>}
                {sources.data?.sort((a,b)=>new Date(b.pushed_at).getTime() - new Date(a.pushed_at).getTime()).map((src, i) => (
                    <ExploitSourceCard key={src.id} src={src} latest={i==0} />
                ))}
            </Box>
            <Group mt="xl" justify="flex-end">
                <Button onClick={form.reset} color="gray" disabled={!form.isDirty()}>Reset</Button>
                <Button type="submit" color="blue" disabled={!form.isValid() || !form.isDirty()}>{"Edit"}</Button>
            </Group>
        </form>

    </Modal>
}