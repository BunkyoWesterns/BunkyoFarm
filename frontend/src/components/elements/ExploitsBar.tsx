import { exploitsQuery, useClientSolver, useExtendedExploitSolver, useGroupSolver } from "@/utils/queries"
import { Box, Divider, Flex, Paper, ScrollArea, Space, Tooltip } from "@mantine/core"
import { useState } from "react"
import { GoDotFill } from "react-icons/go"
import { ExploitDetailModal } from "@/components/modals/ExploitDetailModal"


export const ExploitBar = () => {
    const exploits = exploitsQuery()
    const extendedExploitSolver = useExtendedExploitSolver()
    const clientSolver = useClientSolver()
    const groupSolver = useGroupSolver()
    const [modalExploitId, setModalExploitId] = useState<string|null>(null)

    return <Box style={{width:"100%", fontSize:"90%"}} >
        <b>Launched Exploits</b>
        <Space h="md" />
        <Divider />
        <Space h="lg" />
        <ScrollArea style={{width:"100%"}}>
            <Flex>
                {(exploits.data??[]).sort( (a, b) => {
                    if (a.status == "disabled" && b.status == "active")
                        return -1
                    else if (a.status == "active" && b.status == "disabled")
                        return 1
                    else
                        return b.name.localeCompare(a.name)
                } ).map((expl) => <Box style={{fontSize:"90%", cursor:"pointer"}} onClick={()=>setModalExploitId(expl.id)} className="transparency-on-hover" key={expl.id}>
                        <Paper shadow="md" radius="xl" withBorder px={10} py={5} bg="gray" mx="xs">
                            <Box className="center-flex">
                                <StatusPoint status={expl.status} />
                                <Space w={3} />
                                <Box>
                                    <Box style={{ fontSize: "90%", whiteSpace: "nowrap"}}>
                                        {extendedExploitSolver(expl.id)}
                                    </Box>
                                    <Box style={{ fontSize: "70%", whiteSpace: "nowrap"}}>
                                        {expl.status=="active"?"running":"ran"} by: {expl.last_execution_group_by?`${groupSolver(expl.last_execution_group_by)}`:clientSolver(expl.last_execution_by)}
                                    </Box>
                                </Box>
                            </Box>
                        </Paper>   
                    <Space h="md" />
                </Box>)}
            </Flex>
        </ScrollArea>
        <ExploitDetailModal opened={modalExploitId != null} close={()=>setModalExploitId(null)} exploitId={modalExploitId??""} />
        
        <Space h="md" />
    </Box>
}

export const StatusPoint = (props:{ status?:"active"|"inactive"|"disabled"|null }) => {
    return <Tooltip label={props.status == null?"Status":props.status=="active"?"Active":"Inactive"} color={props.status == null?"grey":props.status=="active"?"green":"red"}>
        <span className="center-flex"><GoDotFill color={props.status == null?"grey":props.status=="active"?"green":"red"} size={30} /></span>
    </Tooltip>
}