# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: {{VERSION_PLACEHOLDER}}
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from exploitfarm.reqs.models.configuration import Configuration
from exploitfarm.reqs.models.message_info import MessageInfo
from exploitfarm.reqs.models.setup_status import SetupStatus
from exploitfarm.reqs.models.submitter_dto import SubmitterDTO
from exploitfarm.reqs.models.team_dto import TeamDTO
from typing import Optional, Set
from typing_extensions import Self

class StatusAPI(BaseModel):
    """
    StatusAPI
    """ # noqa: E501
    status: SetupStatus
    loggined: StrictBool
    config: Optional[Configuration] = None
    server_time: datetime
    auth_key: Optional[StrictStr] = None
    submitter: Optional[SubmitterDTO] = None
    teams: Optional[List[TeamDTO]] = None
    messages: Optional[List[MessageInfo]]
    __properties: ClassVar[List[str]] = ["status", "loggined", "config", "server_time", "auth_key", "submitter", "teams", "messages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusAPI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submitter
        if self.submitter:
            _dict['submitter'] = self.submitter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item in self.teams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['teams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['messages'] = _items
        # set to None if config (nullable) is None
        # and model_fields_set contains the field
        if self.config is None and "config" in self.model_fields_set:
            _dict['config'] = None

        # set to None if auth_key (nullable) is None
        # and model_fields_set contains the field
        if self.auth_key is None and "auth_key" in self.model_fields_set:
            _dict['auth_key'] = None

        # set to None if submitter (nullable) is None
        # and model_fields_set contains the field
        if self.submitter is None and "submitter" in self.model_fields_set:
            _dict['submitter'] = None

        # set to None if teams (nullable) is None
        # and model_fields_set contains the field
        if self.teams is None and "teams" in self.model_fields_set:
            _dict['teams'] = None

        # set to None if messages (nullable) is None
        # and model_fields_set contains the field
        if self.messages is None and "messages" in self.model_fields_set:
            _dict['messages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusAPI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "loggined": obj.get("loggined"),
            "config": Configuration.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "server_time": obj.get("server_time"),
            "auth_key": obj.get("auth_key"),
            "submitter": SubmitterDTO.from_dict(obj["submitter"]) if obj.get("submitter") is not None else None,
            "teams": [TeamDTO.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None,
            "messages": [MessageInfo.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None
        })
        return _obj


