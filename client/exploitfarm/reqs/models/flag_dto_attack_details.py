# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: {{VERSION_PLACEHOLDER}}
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from exploitfarm.reqs.models.attack_execution_status import AttackExecutionStatus
from typing import Optional, Set
from typing_extensions import Self

class FlagDTOAttackDetails(BaseModel):
    """
    FlagDTOAttackDetails
    """ # noqa: E501
    id: StrictInt
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    status: AttackExecutionStatus
    error: Optional[Union[StrictBytes, StrictStr]]
    recieved_at: datetime
    target: Optional[Any] = None
    exploit: Optional[Any] = None
    executed_by: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["id", "start_time", "end_time", "status", "error", "recieved_at", "target", "exploit", "executed_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlagDTOAttackDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if target (nullable) is None
        # and model_fields_set contains the field
        if self.target is None and "target" in self.model_fields_set:
            _dict['target'] = None

        # set to None if exploit (nullable) is None
        # and model_fields_set contains the field
        if self.exploit is None and "exploit" in self.model_fields_set:
            _dict['exploit'] = None

        # set to None if executed_by (nullable) is None
        # and model_fields_set contains the field
        if self.executed_by is None and "executed_by" in self.model_fields_set:
            _dict['executed_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlagDTOAttackDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "status": obj.get("status"),
            "error": obj.get("error"),
            "recieved_at": obj.get("recieved_at"),
            "target": obj.get("target"),
            "exploit": obj.get("exploit"),
            "executed_by": obj.get("executed_by")
        })
        return _obj


