# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: {{VERSION_PLACEHOLDER}}
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from exploitfarm.reqs.models.attack_mode import AttackMode
from exploitfarm.reqs.models.setup_status import SetupStatus
from typing import Optional, Set
from typing_extensions import Self

class Configuration(BaseModel):
    """
    Configuration
    """ # noqa: E501
    flag_regex: Optional[StrictStr] = Field(default='', alias="FLAG_REGEX")
    start_time: Optional[datetime] = Field(default=None, alias="START_TIME")
    end_time: Optional[datetime] = Field(default=None, alias="END_TIME")
    tick_duration: Optional[StrictInt] = Field(default=120, alias="TICK_DURATION")
    attack_mode: Optional[AttackMode] = Field(default=None, alias="ATTACK_MODE")
    loop_attack_delay: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=0, alias="LOOP_ATTACK_DELAY")
    attack_time_tick_delay: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=0, alias="ATTACK_TIME_TICK_DELAY")
    flag_timeout: Optional[StrictInt] = Field(default=None, alias="FLAG_TIMEOUT")
    flag_submit_limit: Optional[StrictInt] = Field(default=None, alias="FLAG_SUBMIT_LIMIT")
    submit_delay: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=0, alias="SUBMIT_DELAY")
    submitter: Optional[StrictInt] = Field(default=None, alias="SUBMITTER")
    submitter_timeout: Optional[StrictInt] = Field(default=None, alias="SUBMITTER_TIMEOUT")
    authentication_required: Optional[StrictBool] = Field(default=False, alias="AUTHENTICATION_REQUIRED")
    password_hash: Optional[StrictStr] = Field(default=None, alias="PASSWORD_HASH")
    setup_status: Optional[SetupStatus] = Field(default=None, alias="SETUP_STATUS")
    __properties: ClassVar[List[str]] = ["FLAG_REGEX", "START_TIME", "END_TIME", "TICK_DURATION", "ATTACK_MODE", "LOOP_ATTACK_DELAY", "ATTACK_TIME_TICK_DELAY", "FLAG_TIMEOUT", "FLAG_SUBMIT_LIMIT", "SUBMIT_DELAY", "SUBMITTER", "SUBMITTER_TIMEOUT", "AUTHENTICATION_REQUIRED", "PASSWORD_HASH", "SETUP_STATUS"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Configuration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['START_TIME'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['END_TIME'] = None

        # set to None if flag_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.flag_timeout is None and "flag_timeout" in self.model_fields_set:
            _dict['FLAG_TIMEOUT'] = None

        # set to None if flag_submit_limit (nullable) is None
        # and model_fields_set contains the field
        if self.flag_submit_limit is None and "flag_submit_limit" in self.model_fields_set:
            _dict['FLAG_SUBMIT_LIMIT'] = None

        # set to None if submitter_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.submitter_timeout is None and "submitter_timeout" in self.model_fields_set:
            _dict['SUBMITTER_TIMEOUT'] = None

        # set to None if password_hash (nullable) is None
        # and model_fields_set contains the field
        if self.password_hash is None and "password_hash" in self.model_fields_set:
            _dict['PASSWORD_HASH'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Configuration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FLAG_REGEX": obj.get("FLAG_REGEX") if obj.get("FLAG_REGEX") is not None else '',
            "START_TIME": obj.get("START_TIME"),
            "END_TIME": obj.get("END_TIME"),
            "TICK_DURATION": obj.get("TICK_DURATION") if obj.get("TICK_DURATION") is not None else 120,
            "ATTACK_MODE": obj.get("ATTACK_MODE"),
            "LOOP_ATTACK_DELAY": obj.get("LOOP_ATTACK_DELAY") if obj.get("LOOP_ATTACK_DELAY") is not None else 0,
            "ATTACK_TIME_TICK_DELAY": obj.get("ATTACK_TIME_TICK_DELAY") if obj.get("ATTACK_TIME_TICK_DELAY") is not None else 0,
            "FLAG_TIMEOUT": obj.get("FLAG_TIMEOUT"),
            "FLAG_SUBMIT_LIMIT": obj.get("FLAG_SUBMIT_LIMIT"),
            "SUBMIT_DELAY": obj.get("SUBMIT_DELAY") if obj.get("SUBMIT_DELAY") is not None else 0,
            "SUBMITTER": obj.get("SUBMITTER"),
            "SUBMITTER_TIMEOUT": obj.get("SUBMITTER_TIMEOUT"),
            "AUTHENTICATION_REQUIRED": obj.get("AUTHENTICATION_REQUIRED") if obj.get("AUTHENTICATION_REQUIRED") is not None else False,
            "PASSWORD_HASH": obj.get("PASSWORD_HASH"),
            "SETUP_STATUS": obj.get("SETUP_STATUS")
        })
        return _obj


