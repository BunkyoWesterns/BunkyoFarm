# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: {{VERSION_PLACEHOLDER}}
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from exploitfarm.reqs.models.flag_dto_attack_details import FlagDTOAttackDetails
from exploitfarm.reqs.models.flag_status import FlagStatus
from typing import Optional, Set
from typing_extensions import Self

class FlagDTO(BaseModel):
    """
    FlagDTO
    """ # noqa: E501
    id: StrictInt
    flag: StrictStr
    status: FlagStatus
    last_submission_at: Optional[datetime]
    status_text: Optional[StrictStr] = None
    submit_attempts: Optional[StrictInt] = 0
    attack: FlagDTOAttackDetails
    __properties: ClassVar[List[str]] = ["id", "flag", "status", "last_submission_at", "status_text", "submit_attempts", "attack"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlagDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attack
        if self.attack:
            _dict['attack'] = self.attack.to_dict()
        # set to None if last_submission_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_submission_at is None and "last_submission_at" in self.model_fields_set:
            _dict['last_submission_at'] = None

        # set to None if status_text (nullable) is None
        # and model_fields_set contains the field
        if self.status_text is None and "status_text" in self.model_fields_set:
            _dict['status_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlagDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "flag": obj.get("flag"),
            "status": obj.get("status"),
            "last_submission_at": obj.get("last_submission_at"),
            "status_text": obj.get("status_text"),
            "submit_attempts": obj.get("submit_attempts") if obj.get("submit_attempts") is not None else 0,
            "attack": FlagDTOAttackDetails.from_dict(obj["attack"]) if obj.get("attack") is not None else None
        })
        return _obj


