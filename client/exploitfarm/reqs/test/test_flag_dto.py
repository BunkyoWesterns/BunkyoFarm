# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: {{VERSION_PLACEHOLDER}}
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from exploitfarm.reqs.models.flag_dto import FlagDTO

class TestFlagDTO(unittest.TestCase):
    """FlagDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FlagDTO:
        """Test FlagDTO
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FlagDTO`
        """
        model = FlagDTO()
        if include_optional:
            return FlagDTO(
                id = 56,
                flag = '',
                status = 'ok',
                last_submission_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status_text = '',
                submit_attempts = 56,
                attack = exploitfarm.reqs.models.flag_dto_attack_details.FlagDTOAttackDetails(
                    id = 56, 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = 'done', 
                    error = bytes(b'blah'), 
                    recieved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    target = null, 
                    exploit = null, 
                    executed_by = null, )
            )
        else:
            return FlagDTO(
                id = 56,
                flag = '',
                status = 'ok',
                last_submission_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                attack = exploitfarm.reqs.models.flag_dto_attack_details.FlagDTOAttackDetails(
                    id = 56, 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = 'done', 
                    error = bytes(b'blah'), 
                    recieved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    target = null, 
                    exploit = null, 
                    executed_by = null, ),
        )
        """

    def testFlagDTO(self):
        """Test FlagDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
