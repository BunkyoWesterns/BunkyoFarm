from exploitfarm.utils import *
from exploitfarm.utils.reqs import *
from uuid import uuid4
from typing import List

from textual.app import App, ComposeResult
from textual.widgets import Button, Header
from textual import on
from textual.app import App, ComposeResult
from textual.validation import Number
from textual.widgets import Input, Label, Pretty, Checkbox
from textual.containers import Horizontal
from textual.validation import Length



class InitialConfiguration(App):
    
    def __init__(self, config: ClientConfig, initial_error: str|None = None):
        super().__init__()
        self.title = "xFarm - Initial Configuration"
        self.config = config
        self.initial_error = "[bold red]"+initial_error+"[/]" if initial_error else ""
    
    CSS = """
    Input.-valid {
        border: tall $success 60%;
    }
    Input.-valid:focus {
        border: tall $success;
    }
    Input {
        margin: 1 1;
    }
    Pretty {
        margin-left: 2;
    }
    .input-label {
        margin: 1 2;
    }
    .error-box {
        margin: 1 2;
        height: 3;
    }
    Button {
        margin: 1 2;
    }
    .float-right {
        content-align: right middle;
    }
    .button-box {
        height: 4;
        margin: 2 0;
        margin-top: 3;
    }
    .max-width {
        width: 100%;
    }
    """

    def compose(self) -> ComposeResult:
        yield Header("xFarm - Initial Configuration")
        yield Label("[bold]Welcome to xFarm, please fill the following fields to configure the client", classes="error-box")
        yield Label("[bold]Server address:[/]", classes="input-label")
        yield Input(
            placeholder="127.0.0.1",
            value=self.config.server.address,
            validators=[Length(minimum=1)],
            id="address",
            classes="form-input"
        )
        yield Horizontal(
            Label("[bold]Errors:[/]"),
            Pretty([], id="address_errors"),
            classes="error-box"
        )
        yield Label("[bold]Server port:[/]", classes="input-label")
        yield Input(
            placeholder="5050",
            value=str(self.config.server.port),
            validators=[Number(minimum=1, maximum=65535)],
            id="port",
            classes="form-input"
        )
        yield Horizontal(
            Label("[bold]Errors:[/]"),
            Pretty([], id="port_errors"),
            classes="error-box"
        )
        yield Label("[bold]Nickname:[/]", classes="input-label")
        yield Input(
            placeholder="John Doe",
            value=self.config.client_name,
            validators=[Length(minimum=1)],
            id="nickname",
            classes="form-input"
        )
        yield Horizontal(
            Label("[bold]Errors:[/]"),
            Pretty([], id="nickname_errors"),
            classes="error-box"
        )
        yield Checkbox("Use HTTPS", id="https", value=self.config.server.https, classes="error-box")
        yield Checkbox("Ignore connection failed", id="ign_conn_failed", value=self.config.ignore_connection_failed, classes="error-box")
        yield Horizontal(
            Button("Save", id="save", variant="success"),
            Button("Cancel", id="cancel", variant="error"),
            Button("Test Connection", id="test", variant="primary", classes="float-right"),
            classes="max-width button-box"
        )
        yield Label(self.initial_error, classes="error-box", id="error")
        
    @on(Button.Pressed, "#save")
    def save(self):
        input_forms: List[Input] = self.query(".form-input")
        errors = []
        for form in input_forms:
            errors.extend([ele.failure_description for ele in form.validators if ele.failure_description])
        if len(errors) == 0 and (self.config.ignore_connection_failed or self.test()):
            self.config.write()
            self.exit(1)
    
    @on(Button.Pressed, "#cancel")
    def cancel(self):
        self.exit(1)
    
    @on(Button.Pressed, "#test")
    def test(self):
        error_label = self.query_one("#error", Label)
        if self.config.test_server():
            error_label.update(f"[bold green]Connection done successfully to server[/]: {get_url("//", self.config)}")
            return True
        else:
            error_label.update(f"[bold red]Failed to connect to server at {get_url("//", self.config)}[/]: [orange]{e}[/]")
            return False
    
    @on(Checkbox.Changed, "#https")
    def https_change(self, event: Checkbox.Changed):
        self.config.server.https = event.value
    
    @on(Checkbox.Changed, "#ign_conn_failed")
    def ignore_connection_failed_change(self, event: Checkbox.Changed):
        self.config.ignore_connection_failed = event.value
    
    @on(Input.Changed, "#address")
    def address_check(self, event: Input.Changed) -> None:
        # Updating the UI to show the reasons why validation failed
        error_label = self.query_one("#address_errors", Pretty)
        if not event.validation_result.is_valid:
            error_label.update(event.validation_result.failure_descriptions)
        else:
            error_label.update([])
            self.config.server.address = event.input.value
    
    @on(Input.Changed, "#port")
    def port_check(self, event: Input.Changed) -> None:
        # Updating the UI to show the reasons why validation failed
        error_label = self.query_one("#port_errors",Pretty)
        if not event.validation_result.is_valid:  
            error_label.update(event.validation_result.failure_descriptions)
        else:
            error_label.update([])
            self.config.server.port = int(event.input.value)
            
    
    @on(Input.Changed, "#nickname")
    def nickname_check(self, event: Input.Changed) -> None:
        # Updating the UI to show the reasons why validation failed
        error_label = self.query_one("#nickname_errors",Pretty)
        if not event.validation_result.is_valid:  
            error_label.update(event.validation_result.failure_descriptions)
        else:        
            error_label.update([])
            self.config.client_name = event.input.value

def inital_config_setup(config: ClientConfig):
    
    if config.client_id is None:
        config.client_id = uuid4()
        config.write()
    
    if (
        config.server.address is None   or
        config.client_name is None      or
        config.client_name == ""
    ):
        InitialConfiguration(config).run()
    elif not config.ignore_connection_failed:
        try:
            Reqs(config).status()
        except Exception:
            InitialConfiguration(config, f"Connection to {get_url('//', config)} failed, the url is wrong or the server is down").run()
