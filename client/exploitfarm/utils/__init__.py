from pydantic import BaseModel
from uuid import UUID
import os, socket
from fasteners import InterProcessLock

DEFAULT_SERVER_PORT = 5050

def parse_address(address:str, default_port:int|None = None) -> tuple[str, int]:
    parts = address.split(":")
    address = parts[0].strip()
    port = int(parts[1]) if len(parts) > 1 else default_port
    if port is None:
        raise ValueError("Port is required")
    return address, port

def try_tcp_connection(address:str, timeout:float|None = 3) -> tuple[bool, str|None]:
    address, port = parse_address(address, default_port=DEFAULT_SERVER_PORT)
    s = socket.socket()
    try:
        s.settimeout(timeout)
        s.connect((address, port))
    except Exception as e: 
        return False, f"Connection to {address}:{port} Failed: {e}"
    finally:
        s.close()
    return True, None

class _ClientServerConfig(BaseModel):
    https: bool = False
    address: str|None = None
    port: int = DEFAULT_SERVER_PORT
    auth_key: str|None = None

class ClientConfig(BaseModel):
    client_id: UUID|None = None
    client_name: str|None = None
    server: _ClientServerConfig = _ClientServerConfig()
    ignore_connection_failed: bool = False
    
    @classmethod
    def read(cls) -> "ClientConfig":
        return read_client_config()
    
    def write(self):
        write_client_config(self)
    
    def test_server(self) -> bool:
        from exploitfarm.utils.reqs import Reqs
        try:
            Reqs(self).status()
            return True
        except Exception:
            return False

def create_lock(name:str) -> InterProcessLock:
    file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), name)
    base_path = os.path.dirname(file_path)
    if not os.path.exists(base_path): os.makedirs(base_path)
    return InterProcessLock(file_path)

CLIENT_CONFIG_LOCK = create_lock(os.path.expanduser("~/.exploitfarm/client_config.json.lock"))

def _ensure_config_dir():
    config_dir = os.path.expanduser("~/.exploitfarm")
    if not os.path.exists(config_dir): os.makedirs(config_dir)
    
def write_client_config(config:ClientConfig):
    _ensure_config_dir()
    config_path = os.path.expanduser("~/.exploitfarm/client_config.json")
    with open(config_path, "w") as f:
        f.write(config.model_dump_json())

def read_client_config() -> ClientConfig:
    _ensure_config_dir()
    config_path = os.path.expanduser("~/.exploitfarm/client_config.json")
    if not os.path.isfile(config_path):
        return ClientConfig()
    with open(config_path, "r") as f:
        return ClientConfig.model_validate_json(f.read())