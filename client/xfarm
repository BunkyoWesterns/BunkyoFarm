#!/usr/bin/env python3

import typer
from rich import print
from rich.console import Console

from exploitfarm.utils import *
from exploitfarm.utils.reqs import get_url
from exploitfarm.utils.cmd.config import InitialConfiguration, inital_config_setup
from exploitfarm.utils.cmd.login import login_required, try_authenticate
import getpass

app = typer.Typer(
    no_args_is_help=True,
    add_completion=False
)
console = Console()

state = {"interactive": True}

class g:
    config: ClientConfig = ClientConfig.read()

def initial_setup(login=True):
    inital_config_setup(g.config, interactive=state["interactive"])
    if login:
        login_required(g.config, interactive=state["interactive"])

@app.command(help="Configure the client settings")
def config(
    address: str = typer.Option(None, help="The address of the server"),
    port: int = typer.Option(None, help="The port of the server"),
    nickname: str = typer.Option(None, help="The nickname of this client"),
    https: bool = typer.Option(False, help="Use HTTPS for the connection"),
    skip_connection_test: bool = typer.Option(False, help="Skip the connection test"),
):
    if state["interactive"]:
        init_config = InitialConfiguration(g.config)
        if init_config.run() == 0:
            print("[bold green]Configuration saved![/]")
        else:
            print("[bold red]Configuration cancelled[/]")
    else:
        if address:
            g.config.server.address = address
        if port:
            g.config.server.port = port
        if nickname:
            g.config.client_name = nickname
        if https:
            g.config.server.https = https
        if skip_connection_test:
            g.config.ignore_connection_failed = skip_connection_test
        elif not g.config.test_server():
            print(f"[bold red]Connection test failed to {get_url('//', g.config)}[/]")
            return
        g.config.write()
        print("[bold green]Config updated[/]")

@app.command(help="Reset the client settings")
def reset():
    print("[bold yellow]Are you sure you want to reset configs?\n[bold red]This operation may break some exploits running on the client.", end="")
    delete = typer.confirm("")
    if delete:
        ClientConfig().write()
        print("[bold green]Client resetted successful[/]")
    else:
        print("[bold]Reset cancelled[/]")

@app.command()
def start():
    initial_setup()
    print({
        "message": "start"
    })

@app.command()
def login(
    password: str = typer.Option(None, help="The password of the user"),
    stdin: bool = typer.Option(False, help="Read the password from stdin"),
):
    initial_setup(login=False)
    
    if g.config.status["status"] == "setup":
        print("[bold red]Please configure the server first[/]")
        return
    if g.config.status["loggined"] and not g.config.status["config"]["AUTHENTICATION_REQUIRED"]:
        print("[bold green]Authentication is not required[/]")
        return
    if g.config.status["loggined"]:
        print("[bold green]Already logged in![/]")
        return
    
    if stdin or (not password and not state["interactive"]):
        if state["interactive"]:
            password = getpass.getpass("Password: ")
        else:
            password = input("Password: ")
        status, error = try_authenticate(password, g.config)
        if status:
            print("[bold green]Logged in![/]")
        else:
            print(f"[bold red]Error: {error}[/]")
        return

    if password:
        status, error = try_authenticate(password, g.config)
        if status:
            print("[bold green]Logged in![/]")
        else:
            print(f"[bold red]Error: {error}[/]")
        return

    login_required(g.config, interactive=state["interactive"])

@app.command()
def logout():
    g.config.server.auth_key = None
    g.config.write()
    print("[bold red]Logged out[/]")

@app.command()
def init():
    initial_setup()
    print({
        "message": "init"
    })

@app.callback()
def main(interactive: bool = typer.Option(True, help="Interactive configuration mode", envvar="XFARM_INTERACTIVE")):
    state["interactive"] = interactive

if __name__ == "__main__":
    app()
