#!/usr/bin/env python3

import typer
from typing import Annotated
from enum import Enum
from rich import print

from rich.console import Console
from rich.table import Table

from exploitfarm.utils import *
from exploitfarm.utils.cmd import *

app = typer.Typer()
console = Console()

class g:
    config: ClientConfig = ClientConfig.read()

def initial_setup():
    inital_config_setup(g.config)
        
"""
def table_test():
    table = Table("Name", "Item")
    table.add_row("Rick", "Portal Gun")
    table.add_row("Morty", "Plumbus")
    console.print(table)

class Option(str, Enum):
    init = "init"
    login = "login"
    start = "start"
    reset = "reset"
    config = "config"

valid_commands = map(lambda x: x.value, list(Option))

def complete_command(incomplete: str):
    completion = []
    for name in valid_commands:
        if name.startswith(incomplete):
            completion.append(name)
    return completion
"""

@app.command(help="Configure the client settings")
def config():
    InitialConfiguration(g.config).run()

@app.command(help="Reset the client settings")
def reset():
    delete = typer.confirm("Are you sure you want to reset configs? (This may break some exploits running on the client)")
    if delete:
        ClientConfig().write()
        print("[bold red]Reset successful[/]")
    else:
        print("[bold]Reset cancelled[/]")

@app.command()
def start():
    initial_setup()
    print({
        "message": "start"
    })

@app.command()
def login():
    initial_setup()
    print({
        "message": "login"
    })

@app.command()
def init():
    initial_setup()
    print({
        "message": "init"
    })


if __name__ == "__main__":
    app()
